{
    "id": "OlPkIxBpyjiUdrHdvITO",
    "name": "<templates>",
    "file_version": "2.0.1",
    "meta": {
        "app_version": "0.4.0-0",
        "file_blobs": {
            "src/views/About.vue": "b6bc32516a77a823a27b8be060b0036b03bfd667",
            "src/components/Navdrawer.vue": "697ef59c6c163cc590cd60033dbd791aac9447a9",
            "src/components/TreeView.vue": "c3b2def8a9cd275c693aad67aed2f154ba9b569c"
        }
    },
    "content": [
        {
            "type": "text",
            "text": "The template tag contains the componentâ€™s HTML markup.\nIt uses HTML-based syntax and allow us to declaritive bind the rendered DOM to the Vue instance data.\nIn this unit we will go through the syntax and directive that goes inside the template.\n\nNote that the tags that start with `v-` are vuetify components, you can use regular HTML tags as well."
        },
        {
            "type": "snippet",
            "path": "src/views/About.vue",
            "comments": [
                "Inside the `<template></template>` tags you will structure the HTML and the component. ",
                "Inside the tags there should be only 1 root element. Need another one? Wrap them with a `<div>`.",
                "`<hello-world />` is a component we created and we use it inside the template of the app 'About' page."
            ],
            "firstLineNumber": 1,
            "lines": [
                "*<template>",
                "*  <v-container>",
                "*    <h1>This is an about page</h1>",
                "*    <h2>{{ aboutPage }}</h2>",
                "*    <hello-world />",
                "*  </v-container>",
                "*</template>",
                "*",
                " <script>",
                " import HelloWorld from \"@/components/HelloWorld.vue\";",
                " "
            ]
        },
        {
            "type": "snippet",
            "path": "src/components/Navdrawer.vue",
            "comments": [
                "Take a look at how we displaying the title with `{{ title }}`, this let Vue know that the text we want to show is the value of the variable `title`. It is called  in-template expression ."
            ],
            "firstLineNumber": 2,
            "lines": [
                "   <v-navigation-drawer permanent app>",
                "     <v-list-item>",
                "       <v-list-item-content>",
                "*        <v-list-item-title class=\"title custom-class\">{{title}}</v-list-item-title>",
                "         <v-list-item-subtitle> Learn how to swimm in Vue.js </v-list-item-subtitle>",
                "       </v-list-item-content>",
                "     </v-list-item>"
            ]
        },
        {
            "type": "snippet",
            "path": "src/components/Navdrawer.vue",
            "comments": [
                "`v-for` is used for list rendering (loops).",
                "Here we rending the menu of the app, and each item will be shown with the icon that is set on the object.",
                "When using `v-for`,  Vue will require to set a key, an unique identifier for each item"
            ],
            "firstLineNumber": 9,
            "lines": [
                " ",
                "     <v-divider></v-divider>",
                " ",
                "*    <v-list dense nav>",
                "*      <v-list-item link v-for=\"item in menuItems\" :key=\"item.title\" :to=\"item.route\">",
                "*        <v-list-item-icon>",
                "*          <v-icon>{{ item.icon }}</v-icon>",
                "*        </v-list-item-icon>",
                " ",
                "         <v-list-item-content>",
                "           <v-list-item-title>{{ item.title }}</v-list-item-title>"
            ]
        },
        {
            "type": "snippet",
            "path": "src/components/TreeView.vue",
            "comments": [
                "The v-if is used for conditional rendering, The block will be render only if the directive's expression is true.",
                "You can use `v-else` directive to indicate what will be shown if the expression is false",
                "The `v-else` must follow immediately after the `v-if` or the `v-else-if`.",
                "In this case if we in read only mode we render the text as is instead of an editable text field.",
                "The `@click` also can be written as `v-on:click` and it let  us to listen to DOM event and trigger JS - In this case we are listening to click event of the trash icon that is append to the text field.",
                "`v-model` is used for 2 way binding, Here we binding the value of the item name, whenever the value is changed from the text field, the parent component `TreeView` data will be updated.",
                "`v-bind` or `:` is used to bind HTML attribute (like class or style) to JS expressions. it is also used to pass props to child component. In this example Vuetify text field can recive a prop of icon, and we passing the trash icon. "
            ],
            "firstLineNumber": 8,
            "lines": [
                "     </v-container>",
                "     <v-treeview open-all :items=\"items\">",
                "       <template slot=\"label\" slot-scope=\"{ item }\">",
                "*        <v-text-field",
                "*          v-if=\"!readOnly\"",
                "*          class=\"text-field\"",
                "*          v-model=\"item.name\"",
                "*          @input=\"updateInput\"",
                "*          :append-icon=\"`mdi-trash-can-outline`\"",
                "*          @click:append=\"deleteItem(item.id)\"",
                "*        >",
                "*        </v-text-field>",
                "*        <div v-else>{{ item.name }}</div>",
                "       </template>",
                "       <template v-if=\"!readOnly\" slot=\"prepend\" slot-scope=\"{ item }\">",
                "         <v-tooltip bottom>"
            ]
        },
        {
            "type": "text",
            "text": ""
        }
    ],
    "task": {
        "dod": "",
        "hints": [],
        "tests": []
    }
}
