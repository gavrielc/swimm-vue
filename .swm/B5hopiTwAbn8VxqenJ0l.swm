{
    "id": "B5hopiTwAbn8VxqenJ0l",
    "name": "Update Items",
    "dod": "Trigger the save items when items being update from TreeView.",
    "description": "The HomeView component is where we save the data to the local storage and update the vuex store. \nCurrently you can add, update and delete items in the TreeView component but it doesn't saved.",
    "summary": "",
    "hunksOrder": [
        "src/components/TreeView.vue_0",
        "src/components/TreeView.vue_1",
        "src/components/TreeView.vue_2",
        "src/components/TreeView.vue_3",
        "src/views/Home.vue_0"
    ],
    "tests": [],
    "hints": [
        "The save logic should stay in the Home component (it is already been done), use events to trigger the save.",
        "Search how you can use parameters with events."
    ],
    "play_mode": null,
    "swimmPatch": {
        "src/components/TreeView.vue": {
            "diffType": "MODIFIED",
            "fileDiffHeader": "diff --git a/src/components/TreeView.vue b/src/components/TreeView.vue\nindex c3b2def..89845d4 100644\n--- a/src/components/TreeView.vue\n+++ b/src/components/TreeView.vue",
            "hunks": [
                {
                    "swimmHunkMetadata": {
                        "hunkComments": []
                    },
                    "hunkDiffLines": [
                        "@@ -12,7 +12,6 @@",
                        "           v-if=\"!readOnly\"",
                        "           class=\"text-field\"",
                        "           v-model=\"item.name\"",
                        "-          @input=\"updateInput\"",
                        "           :append-icon=\"`mdi-trash-can-outline`\"",
                        "           @click:append=\"deleteItem(item.id)\"",
                        "         >"
                    ]
                },
                {
                    "swimmHunkMetadata": {
                        "hunkComments": []
                    },
                    "hunkDiffLines": [
                        "@@ -57,9 +56,7 @@",
                        "         items.forEach((child, index) => {",
                        "           if (child.id == id) {",
                        "             items.splice(index, 1);",
                        "-            found = true;",
                        "+            found = true;          }",
                        "-            this.updateItems();",
                        "-          }",
                        "           if (child.children) {",
                        "             this.deleteItem(id, child.children);",
                        "           }"
                    ]
                },
                {
                    "swimmHunkMetadata": {
                        "hunkComments": []
                    },
                    "hunkDiffLines": [
                        "@@ -79,17 +76,9 @@",
                        "         name,",
                        "       });",
                        "       this.saveNextIdToLocalStorage(id + 1);",
                        "-      this.updateItems();",
                        "     },",
                        "     updateItems() {",
                        "-      this.$emit(\"updateItems\", this.items);",
                        "+      // TODO",
                        "-    },",
                        "-    updateInput() {",
                        "-      // triggered on input, should only update the local storage only when user finished typing (debouncing)",
                        "-      if (this.timeout) clearTimeout(this.timeout);",
                        "-      this.timeout = setTimeout(() => {",
                        "-        this.updateItems();",
                        "-      }, 1000);",
                        "     },",
                        "     addEntry() {",
                        "       this.items.push({"
                    ]
                },
                {
                    "swimmHunkMetadata": {
                        "hunkComments": []
                    },
                    "hunkDiffLines": [
                        "@@ -97,7 +86,6 @@",
                        "         name: \"\",",
                        "       });",
                        "       this.saveNextIdToLocalStorage(this.nextId + 1);",
                        "-      this.updateItems();",
                        "     },",
                        "   },",
                        " };"
                    ]
                }
            ]
        },
        "src/views/Home.vue": {
            "diffType": "MODIFIED",
            "fileDiffHeader": "diff --git a/src/views/Home.vue b/src/views/Home.vue\nindex b847144..572e24f 100644\n--- a/src/views/Home.vue\n+++ b/src/views/Home.vue",
            "hunks": [
                {
                    "swimmHunkMetadata": {
                        "hunkComments": []
                    },
                    "hunkDiffLines": [
                        "@@ -1,6 +1,6 @@",
                        " <template>",
                        "   <v-container class=\"home\">",
                        "-    <tree-view :read-only=\"!isHomePage\" :items=\"itemToDisplay\" :title=\"title\" @updateItems=\"updateItems\" />",
                        "+    <tree-view :read-only=\"!isHomePage\" :items=\"itemToDisplay\" :title=\"title\"/>",
                        "   </v-container>",
                        " </template>",
                        " "
                    ]
                }
            ]
        }
    },
    "app_version": "0.2.9",
    "file_version": "1.0.4"
}